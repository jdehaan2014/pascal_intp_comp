unit ubaseparser;

{$mode objfpc}{$H+}

interface
uses
  Classes, Sysutils, ubasescanner, utoken, umessages, usymtab, ucode;

type

  { TBaseParser }

  TBaseParser = class(TInterfacedObject, IMessageProducer)
    protected
      class var
        Symtab: ISymtab;                // generated symbol table
        MessageHandler: TMessageHandler;  // message handler delegate
      var
        Scanner: TBaseScanner;              // scanner used with this parser
        ICode: IIntermediateCode;       // intermediate code generated by this parser
    public
      class constructor Create;                // must be first in definition ??? bug???
      constructor Create(AScanner: TBaseScanner);

      function getSymTab: ISymtab;
      function getICode: IIntermediateCode;
      function getMessageHandler: TMessageHandler;
      function CurrentToken: TToken;
      function NextToken: TToken;

      Function getErrorCount: integer;   virtual; abstract;
      procedure Parse; virtual; abstract;

      procedure addMessageListener(Listener: IMessageListener);   //Add a parser message listener.
      procedure removeMessageListener(Listener: IMessageListener);  //Remove a parser message listener
      procedure sendMessage(Message: TMessage);                    //Notify listeners after setting the message
  end;



implementation

{ TBaseParser }

constructor TBaseParser.Create(AScanner : TBaseScanner);
begin
  Scanner := AScanner;
  ICode := Nil;
end;

class constructor TBaseParser.Create;
begin
  TBaseParser.Symtab := Nil;
  TBaseParser.MessageHandler := TMessageHandler.Create;
end;

function TBaseParser.getSymTab : ISymtab;
begin
  Result := Symtab;
end;

function TBaseParser.getICode : IIntermediateCode;
begin
  Result := ICode;
end;

function TBaseParser.getMessageHandler : TMessageHandler;
begin
  Result := MessageHandler;
end;

function TBaseParser.currentToken : TToken;
begin
  result := Scanner.currentToken;
end;

function TBaseParser.nextToken : TToken;
begin
  result := Scanner.NextToken;
end;

procedure TBaseParser.addMessageListener(Listener : IMessageListener);
begin
  MessageHandler.addListener(Listener);
end;

procedure TBaseParser.removeMessageListener(Listener : IMessageListener);
begin
  MessageHandler.removeListener(Listener);
end;

procedure TBaseParser.sendMessage(Message : TMessage);
begin
  MessageHandler.sendMessage(Message);
end;

end.

